@startuml
'https://plantuml.com/sequence-diagram

autonumber

mainframe Attack Paralyze Agent Def

actor Player

Player -> "virologist: Virologist"++: useAgent(paralyzed, targetVirologist)
"virologist: Virologist" -> "targetVirologist: Virologist"++: attack(paralyzed, virologist, targetVirologist)
"targetVirologist: Virologist" -> "cloak: Cloak"++ : applyEffect(targetVirologist)
"cloak: Cloak" -> "cloak: Cloak"++ : getStrategy()
"cloak: Cloak" --> "cloak: Cloak"-- : defenseStrategy

"cloak: Cloak" -> "targetVirologist: Virologist"++: setDefenseStrategy(defensestrategy)

"targetVirologist: Virologist" -> "targetVirologist: Virologist"++: defense(paralyzed, virologist, targetVirologist)


note over "targetVirologist: Virologist"
    When the virologist have a cloak, there is
    an **82.3%** chance that the attack will **fail.**
end note

note right of "targetVirologist: Virologist"
Get a random number as a percentage.
end note

"targetVirologist: Virologist" -> "targetVirologist: Virologist": surviveRate = generateRandomNumber()

opt if (surviveRate > 0.823)
    "targetVirologist: Virologist" -> "paralyzed: Paralyzed"++: +applyEffect(targetVirologist)

      "paralyzed: Paralyzed" -> "paralyzed: Paralyzed"++ : getStrategy()
      "paralyzed: Paralyzed" --> "paralyzed: Paralyzed"-- : roundRunStrategy
      "paralyzed: Paralyzed" -> "targetVirologist: Virologist"++: setRoundRunStrategy(roundRunStrategy)
      "targetVirologist: Virologist" --> "paralyzed: Paralyzed"--
      "paralyzed: Paralyzed" --> "targetVirologist: Virologist"--
end opt

"targetVirologist: Virologist" --> "targetVirologist: Virologist" --

"targetVirologist: Virologist" --> "cloak: Cloak" --
"cloak: Cloak" --> "targetVirologist: Virologist" --


"targetVirologist: Virologist" --> "virologist: Virologist" --

"virologist: Virologist" --> Player --
@enduml