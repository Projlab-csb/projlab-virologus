@startuml

abstract class Field{
 +getNeighbors(): Array<Field>
 +getNeighbor(direction: Integer): Field
 +addNeighbor(neighbor: Field): void
 +acceptVirologyst(virologyst: Virologyst): void
 +removeVirologyst(virologyst: Virologyst): void
}

class Lab{
    +getGencode(): Gencode
}
class Storage{
    +getAminoAcid(amount: Integer): AminoAcid
    +getNucleicAcid(amount: Integer): NucleicAcid
}
class Shelter{
    +getEquipmentCount(): Integer
    +getEquipment(): Equipment
}

Lab::getGencode <. Gencode
Storage::getAminoAcid <.l AminoAcid
Storage::getNucleicAcid <.r NucleicAcid
Shelter::getEquipment <.. Equipment

Field <|-- Lab
Field <|-- Storage
Field <|-- Shelter

class Virologist {
    +move(direction: Integer): void
    +collect(field: Field): Collectable
    +useAgent(agent: Agent, virologist: Virologist): void
    +stealEquipment(robber: Virologist): Equipment
    +stealMatter(): Matter
    +canTouche(robber: Virologist): boolean
    'Invoked at the start of the next Round eg. reduce the Agent's lifetime
    +nextRound(): void
}
Virologist *.r. Matter
Virologist *.l. Equipment

abstract class Matter {

}

class AminoAcid
class NucleicAcid

Matter <|-- AminoAcid
Matter <|-- NucleicAcid

abstract class Equipment {
    +onEvent(event)
    +collectBy(v: Virologist)
    +applyEffect(v: Virologist)
    +removeEffect(v: Virologist)
}

class Cloak{
    +applyEffect(v: Virologist)
    +removeEffect(v: Virologist)
}

class Gloves{
    +applyEffect(v: Virologist)
    +removeEffect(v: Virologist)
}

class Bag{
    +applyEffect(v: Virologist)
    +removeEffect(v: Virologist)
}

Equipment <|-- Cloak
Equipment <|-- Gloves
Equipment <|-- Bag

abstract class Agent{
    gencode: Gencode
    +applyEffect(v: Virologist)
    +removeEffect(v: Virologist)
}

class Virus{
    +applyEffect(v: Virologist)
    +removeEffect(v: Virologist)
}
class Vacine{
    +applyEffect(v: Virologist)
    +removeEffect(v: Virologist)
}

Agent <|-- Virus
Agent <|-- Vacine

'This Gencode is basically the crafting receipt of the Agent
class Gencode {
    +requiredNucleicAcid: NucleicAcid
    +requiredAminoAcid: AminoAcid
}

Agent::gencode *-- Gencode

interface Collectable{

}

Collectable<|- Agent
Collectable <|- Equipment


@enduml