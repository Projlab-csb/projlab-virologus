@startuml

interface Steppable{
    'Invoked at the start of the next Round eg. reduce the Agent's lifetime
    +nextRound()
}

interface RoundRunStrategyInterface{
    +roundRun()
}

interface MoveStrategyInterface{
    +move()
}

interface DefenseStrategyInterface{
    +defense()
}

interface Collectable{
    +collectBy(v: Virologist)
    +destroy()
}

class GameController {
    'Handle the turns, this knows the order of virologists, and calls the appropriate nextRound() functions
    +endOfTurn(virologist: Virologist)
    'Checks if the virologist won the game
    +didIWin(virologist: Virologist): boolean
    +gameOver()
}

class Field{
    +getCollectable(): Collectable
    +getNeighbors(): Array<Field>
    +getNeighbor(direction: Integer): Field
    +addNeighbor(neighbor: Field)
    +acceptVirologist(virologist: Virologist)
    +removeVirologist(virologist: Virologist)
}

class Lab{
    +getGencode(): Gencode
}

class Storage{
    +getAminoAcid(amount: Integer): AminoAcid
    +getNucleicAcid(amount: Integer): NucleicAcid
}

class Shelter{
    '+getEquipmentCount(): Integer
    +getEquipment(): Equipment
}

class Virologist {
    +move(direction: Integer)
    'In the collect function we can use the this.getField()
    +collect()
    +discard(collectable: Collectable)
    +createAgent(gencode: Gencode) : Agent
    +useAgent(agent: Agent, attacker: Virologist, defender: Virologist)
    +stealEquipment(robber: Virologist): Equipment
    +stealMatter(robber: Virologist, matter: Matter): Matter
    +canTouch(robber: Virologist): boolean
    +startOfTurn()
}

abstract class Matter {
    {abstract} +collectBy(v: Virologist)
}

class AminoAcid{
    +collectBy(v: Virologist)
}
class NucleicAcid{
    +collectBy(v: Virologist)
}

abstract class Equipment {
    {abstract} +collectBy(v: Virologist)
    {abstract} +applyEffect(v: Virologist)
    {abstract} +removeEffect(v: Virologist)
}

class Cloak{
    +applyEffect(v: Virologist)
    +removeEffect(v: Virologist)
}

class Gloves{
    +applyEffect(v: Virologist)
    +removeEffect(v: Virologist)
}

class Bag{
    +applyEffect(v: Virologist)
    +removeEffect(v: Virologist)
}

abstract class Agent{
    {abstract} +applyEffect(v: Virologist)
    {abstract} +removeEffect(v: Virologist)
    {abstract} +nextRound()
}

class VitusDance{
    +applyEffect(v: Virologist)
    +removeEffect(v: Virologist)
    +move()
}

class Protection{
    +applyEffect(v: Virologist)
    +removeEffect(v: Virologist)
    +defense()
}

class Paralyzed{
    +applyEffect(v: Virologist)
    +removeEffect(v: Virologist)
    +roundRun()
}

class Forget{
    +applyEffect(v: Virologist)
    +removeEffect(v: Virologist)
}

'This Gencode is basically the crafting receipt of the Agent
class Gencode {
    +requiredNucleicAcid: NucleicAcid
    + requiredAminoAcid: AminoAcid
    +collectBy(v: Virologist)
}

GameController *-l Virologist

Field <|- Lab
Field <|-- Storage
Field <|-- Shelter

Lab "n" o- "0..1" Gencode
Shelter "n" o-- "0..1" Equipment
Storage "n" o-- "0..1" Matter

Virologist *-- RoundRunStrategyInterface
Virologist *-- MoveStrategyInterface
Virologist *-- DefenseStrategyInterface
Virologist "n" --o "0..1" Field
Virologist "n" *-d- "0..1" Matter
Virologist "n" *-d- "0..1" Equipment
Virologist <|.l Steppable
Virologist "n" o-d- "0..1" Gencode

Matter <|-- AminoAcid
Matter <|-- NucleicAcid

Equipment <|-- Cloak
Equipment <|-- Gloves
Equipment <|-- Bag

Cloak <|.. DefenseStrategyInterface
Gloves <|.. DefenseStrategyInterface

Agent <|. Steppable
Agent <|-- VitusDance
Agent <|- Protection
Agent <|-- Paralyzed
Agent <|-- Forget
Agent "0..1" o--o "0..1" Gencode

RoundRunStrategyInterface <|.. Paralyzed
MoveStrategyInterface <|.. VitusDance
DefenseStrategyInterface <|.u Protection

Collectable <|.l Gencode
Collectable <|.. Equipment
Collectable <|. Matter

@enduml